#!/usr/bin/env python3

import argparse
import os
import subprocess
import yaml


def parse_config(filename):
    with open(filename) as f:
        return yaml.load(f)


def config_is_true(value):
    if isinstance(value, bool):
        return value
    elif isinstance(value, str) and value.lower() in ("yes", "true"):
        return True
    elif value == 1:
        return True
    else:
        return False


def create(config, dry_run):
    repo = "{}::{}-{{utcnow:%Y-%m-%dT%H:%M:%SZ}}".format(config["remote"]["repository"], config["remote"]["prefix"])
    source = config["location"]["source"]
    if isinstance(source, str):
        source = [source]

    cmd = ["borgbackup", "create", repo] + source

    if "compression" in config["remote"]:
        cmd += ["--compression", config["remote"]["compression"]]

    if "one_file_system" in config["location"] and config_is_true(config["location"]["one_file_system"]):
        cmd.append("--one-file-system")

    if "exclude_caches" in config["location"] and config_is_true(config["location"]["exclude_caches"]):
        cmd.append("--exclude-caches")

    if "exclude_if_present" in config["location"]:
        for exclude in config["location"]["exclude_if_present"]:
            cmd += ["--exclude-if-present", exclude]

    if "exclude" in config["location"]:
        for exclude in config["location"]["exclude"]:
            cmd += ["--exclude", exclude]

    if dry_run:
        cmd += ["--dry-run"]

    env = dict(os.environ)
    if "rsh" in config["remote"]:
        env["BORG_RSH"] = config["remote"]["rsh"]

    subprocess.run(cmd, check=True, env=env)


def hooks_before(config, dry_run):
    if "hooks" not in config or "before" not in config["hooks"]:
        return

    for hook in config["hooks"]["before"]:
        if dry_run:
            hook = ["echo"] + hook
        subprocess.run(hook, shell=True, check=True)


def hooks_after(config, dry_run):
    if "hooks" not in config or "after" not in config["hooks"]:
        return

    for hook in config["hooks"]["after"]:
        if dry_run:
            hook = ["echo"] + hook
        subprocess.run(hook, shell=True, check=True)


def prune(config, dry_run):
    cmd = ["borgbackup", "prune", config["remote"]["repository"]]
    cmd += ["--stats", "--list"]
    cmd += ["--prefix", config["remote"]["prefix"]]

    if dry_run:
        cmd += ["--dry-run"]

    if "keep_last" in config["retention"]:
        cmd += ["--keep-last", str(config["retention"]["keep_last"])]

    if "keep_within" in config["retention"]:
        cmd += ["--keep-within", str(config["retention"]["keep_within"])]

    if "keep_hourly" in config["retention"]:
        cmd += ["--keep-hourly", str(config["retention"]["keep_hourly"])]

    if "keep_daily" in config["retention"]:
        cmd += ["--keep-daily", str(config["retention"]["keep_daily"])]

    if "keep_weekly" in config["retention"]:
        cmd += ["--keep-weekly", str(config["retention"]["keep_weekly"])]

    if "keep_monthly" in config["retention"]:
        cmd += ["--keep-monthly", str(config["retention"]["keep_monthly"])]

    if "keep_yearly" in config["retention"]:
        cmd += ["--keep-yearly", str(config["retention"]["keep_yearly"])]

    subprocess.run(cmd, check=True)


def main():
    parser = argparse.ArgumentParser(description='borgbackup wrapper.')
    parser.add_argument("--dry-run", action="store_true")
    parser.add_argument("--no-prune", action="store_true")
    parser.add_argument("config")
    args = parser.parse_args()

    config = parse_config(args.config)

    hooks_before(config, dry_run=args.dry_run)
    create(config, dry_run=args.dry_run)
    hooks_after(config, dry_run=args.dry_run)
    if not args.no_prune:
        prune(config, dry_run=args.dry_run)


if __name__ == "__main__":
    main()
